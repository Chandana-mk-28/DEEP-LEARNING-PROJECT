import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import numpy as np
  # Load and preprocess the dataset (using CIFAR-10 as an example)
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0
  # Build the model
model = keras.Sequential([
    layers.Input(shape=(32, 32, 3)),  
    layers.Conv2D(32, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')
])
  # Compile the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)
  # Train the model
history = model.fit(x_train, y_train, epochs=40, validation_data=(x_test, y_test))
  # Plot accuracy and loss over epochs
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss')

plt.show()
  # Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc * 100:.2f}%")
  # Make predictions
predictions = model.predict(x_test)
predicted_classes = tf.argmax(predictions, axis=1).numpy()
  # Display some sample predictions
def plot_sample(x, y, y_pred):
    plt.figure(figsize=(2, 2))# Prevents blurring during upscaling
    plt.imshow(x)
    plt.title(f"True: {y}, Predicted: {y_pred}")
    plt.axis('off')
    plt.show()

for i in range(5):
    plot_sample(x_test[i], y_test[i][0], predicted_classes[i])


  
